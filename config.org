#+TITLE: srijan's emacs configuration
#+AUTHOR: Srijan Choudhary
#+STARTUP: show2levels indent hidestars

* Configuration :emacs:
** Header

This will generate a header at the top of the tangled file to indicate it is generated and is not meant to be modified directly.

#+begin_src emacs-lisp :epilogue (format-time-string ";; Last generated on %c")

;; -*- lexical-binding: t -*-
;; This file has been generated from config.org file. DO NOT EDIT.

#+end_src
** Starting up

Here's how we start:
#+NAME: startup
#+begin_src emacs-lisp
  ;; For speedup.
  ;; (setq straight-check-for-modifications nil)
  ;; Setup straight
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (use-package straight
    :custom (straight-use-package-by-default t))

  ;; Move customization variables to a separate file and load it
  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)
  (setq-default native-comp-async-report-warnings-errors 'silent)

#+END_SRC
** System information
#+BEGIN_SRC emacs-lisp
  (defvar my-laptop-p (equal (system-name) "GGN001944"))
  ;; (defvar my-server-p (and (equal (system-name) "localhost") (equal user-login-name "sacha")))
  (defvar my-phone-p (not (null (getenv "ANDROID_ROOT")))
    "If non-nil, GNU Emacs is running on Termux.")
  (when my-phone-p (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"))
  (global-auto-revert-mode)  ; simplifies syncing
#+END_SRC

** Personal Information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Srijan Choudhary"
      user-mail-address "srijan4@gmail.com")
#+END_SRC

** Search

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'counsel)
  (straight-use-package 'smex)

  ;; (use-package selectrum
  ;;   :config
  ;;   (selectrum-mode +1))

#+END_SRC

** NANO Emacs Theme

#+BEGIN_SRC emacs-lisp

  ;; TODO: Check if the below overrides even work
  ;; (straight-use-package
  ;;  '(nano-splash :type git :host github :repo "rougier/nano-splash"))
  ;; (straight-use-package
  ;;  '(nano-theme :type git :host github :repo "rougier/nano-theme"))
  ;; (straight-use-package
  ;;  '(nano-modeline :type git :host github :repo "rougier/nano-modeline"))

  (use-package nano-emacs
    :straight (:host github :repo "rougier/nano-emacs")
    :no-require t
    :init
    (require 'nano-base-colors)
    (require 'nano-colors)
    (require 'nano-theme-light)
    (require 'nano-theme-dark)
    (require 'nano-layout)

    (setq nano-font-size 14)
    (require 'nano-faces)
    (nano-faces)
    (require 'nano-theme)
    (nano-theme)

    (require 'nano-defaults)
    (require 'nano-session)
    (require 'nano-modeline)
    (require 'nano-bindings)
    (require 'nano-counsel)
    ;; (require 'nano-compact)
    (require 'nano-splash)
    (require 'nano-help)

    (menu-bar-mode -1)

    ;; Override some nano-defaults
    (setq frame-title-format '("%b – Emacs"))
    ;; (setq default-frame-alist
    ;;       (append (list
    ;;                '(height . nil)
    ;;                '(width . nil))))


    (let ((inhibit-message t))
      (message "Welcome to GNU Emacs / N Λ N O edition")
      (message (format "Initialization time: %s" (emacs-init-time))))
    )


#+END_SRC

** Discovering things

#+BEGIN_SRC emacs-lisp
  (use-package helm-descbinds
    :defer t
    :if my-laptop-p
    :bind (("C-h b" . helm-descbinds)
           ("C-h w" . helm-descbinds)))
  (use-package which-key
    :config (which-key-mode))

  (defun my-reload-emacs-configuration ()
    (interactive)
    (load-file "~/.config/nano-emacs/init.el"))
#+END_SRC

** TODO Needs to be categorized
#+BEGIN_SRC emacs-lisp
  (setq dictionary-server "localhost")
  (use-package flyspell
    :hook text-mode)
#+END_SRC

** Org mode

#+BEGIN_SRC emacs-lisp
  (use-package org
    :straight (:type built-in)
    :ensure org-plus-contrib
    :custom
    (org-directory "~/ndxrd-uxxs3/org/")
    (org-agenda-files '("~/ndxrd-uxxs3/org/"))
    (org-log-into-drawer t)
    (org-startup-indented t)
    (org-image-actual-width (list 500))
    (org-startup-with-inline-images t)
    (org-ellipsis " ▼")

    :bind
    ("C-c a" . org-agenda)
    ("C-c c" . org-capture)
    ("C-c l" . org-store-link)
    )
#+END_SRC

** Evil

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-respect-visual-line-mode t)
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (setq evil-undo-system 'undo-fu)

    :config
    (evil-mode 1)

    ;; Prevents esc-key from translating to meta-key in terminal mode.
    (setq evil-esc-delay 0)

    (setq-default evil-shift-width 2)
    (setq-default evil-symbol-word-search t)
    (customize-set-variable 'evil-want-Y-yank-to-eol t)

    (evil-declare-key 'normal org-mode-map
      "gk" 'outline-up-heading
      "gj" 'outline-next-visible-heading
      "H" 'org-beginning-of-line
      "L" 'org-end-of-line
      "t" 'org-todo
      (kbd "<tab>") 'org-cycle
      ",c" 'org-cycle
      ",e" 'org-export-dispatch
      ",n" 'outline-next-visible-heading
      ",p" 'outline-previous-visible-heading
      ",t" 'org-set-tags-command
      ",u" 'outline-up-heading
      "$" 'org-end-of-line
      "^" 'org-beginning-of-line
      "-" 'org-ctrl-c-minus ; change bullet style
      ))

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))

  (use-package undo-fu)

#+END_SRC

** Git

#+BEGIN_SRC emacs-lisp
  (use-package magit)
#+END_SRC

** Erlang & LSP

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    (yas-global-mode t)
    )

  ;; Install the official Erlang mode
  (add-to-list
   'load-path (car (file-expand-wildcards
                    "/usr/lib/erlang/lib/tools-*/emacs")))
  (use-package erlang
    :straight nil
    :hook ((erlang-mode . linum-mode)
           (erlang-mode . column-number-mode))
    :init
    )
  (require 'erlang-start)

  (use-package eglot
    :hook (erlang-mode . eglot-ensure))

#+END_SRC

** Docker and Kubernetes
#+begin_src emacs-lisp
  (use-package dockerfile-mode)
  (use-package yaml-mode)
  (use-package kubernetes
    :ensure t
    :commands (kubernetes-overview)
    :config
    (setq kubernetes-poll-frequency 3600
          kubernetes-redraw-frequency 3600))
  (use-package kubernetes-evil
    :ensure t
    :after kubernetes)
#+end_src
** Ending Stuff
#+BEGIN_SRC emacs-lisp

  (setq gc-cons-threshold (* 2 1000 1000))
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "Emacs ready in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))

#+END_SRC


#  LocalWords:  NANO
