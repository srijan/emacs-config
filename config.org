#+TITLE: srijan's emacs configuration
#+AUTHOR: Srijan Choudhary
#+STARTUP: show2levels indent hidestars

* Configuration                                                       :emacs:
** Header
This will generate a header at the top of the tangled file to indicate it is generated and is not meant to be modified directly.

#+begin_src emacs-lisp :epilogue (format-time-string ";; Last generated on %c")

;; -*- lexical-binding: t -*-
;; This file has been generated from config.org file. DO NOT EDIT.

#+end_src

** Starting up
Here's how we start:
#+NAME: startup
#+begin_src emacs-lisp
  ;; For speedup.
  ;; (setq straight-check-for-modifications nil)
  ;; Setup straight
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (use-package straight
    :custom
    (straight-use-package-by-default t)
    (straight-host-usernames '((github    . "srijan"))))

  ;; Move customization variables to a separate file and load it
  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)
  (setq-default native-comp-async-report-warnings-errors 'silent)

#+END_SRC
** System information
#+BEGIN_SRC emacs-lisp
  (defvar my-linux-p (equal (system-name) "GGN001944"))
  (defvar my-windows-p (equal (system-name) "SHADOW"))
  ;; (defvar my-server-p (and (equal (system-name) "localhost") (equal user-login-name "sacha")))
  (defvar my-phone-p (not (null (getenv "ANDROID_ROOT")))
    "If non-nil, GNU Emacs is running on Termux.")
  (when my-phone-p (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"))
  (global-auto-revert-mode)  ; simplifies syncing
#+END_SRC

** Personal Information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Srijan Choudhary"
      user-mail-address "srijan4@gmail.com")
#+END_SRC

** Basics
#+begin_src emacs-lisp

  ;; TODO: move to org section
  (setq org-support-shift-select t)

  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (scroll-bar-mode -1)
  ;; (menu-bar-mode -1)
  (set-fringe-mode 10)

  ;; (global-display-line-numbers-mode 1)

  (use-package doom-themes
    ;; :disabled t
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled

    ;; (load-theme 'doom-Iosvkem t)
    ;; (load-theme 'doom-snazzy t)
    ;; (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

  ;; (use-package solaire-mode
  ;;   :config
  ;;   (solaire-global-mode +1))

  ;; (use-package catppuccin-theme
  ;;   :straight (:type git :host github :repo "catppuccin/emacs"))

  ;; (load-theme 'modus-vivendi t)
  ;; (use-package dracula-theme
  ;;   :config
  ;;   (load-theme 'dracula t))

  (hl-line-mode 1)
  (blink-cursor-mode -1)

  ;; Recent files
  (recentf-mode 1)

  ;; Minibuffer history
  (setq history-length 100)
  (savehist-mode 1)

  ;; Remember and restore the last cursor location in opened files
  (save-place-mode 1)

  ;; Revert buffers when the underlying file has changed
  (global-auto-revert-mode 1)
  ;; Revert Dired and other buffers
  (setq global-auto-revert-non-file-buffers t)

  ;; Fonts
  ;; (set-face-attribute 'default nil :font "RobotoMono Nerd Font" :height 140)
  ;; (set-face-attribute 'default nil :font "FiraCode Nerd Font Mono" :height 140)
  ;; (set-face-attribute 'default nil :font "Hack Nerd Font Mono" :height 140)

  (load-theme 'modus-operandi t)
  (use-package olivetti
    :custom
    (olivetti-style 'fancy)
    (setq olivetti-fringe '(:background "#e5e5e5"))
    )
  ;; (use-package nano-theme
  ;;   :custom
  ;;   (nano-fonts-use nil)
  ;;   :config
  ;;   (load-theme 'nano t)
  ;;   (nano-mode)
  ;;   (nano-dark)
  ;;   )

  (when my-linux-p
    (set-face-attribute 'default nil :font "Iosevka Comfy Wide Fixed" :height 140))
  (when my-windows-p
    (set-face-attribute 'default nil :font "FiraCode NFM" :height 140))

  (use-package diminish
    :config (require 'diminish))

  (use-package eldoc :diminish eldoc-mode)

  ;; No message in scratch buffer
  (setq initial-scratch-message nil)

  ;; Kill current buffer (instead of asking first buffer name)
  (global-set-key (kbd "C-x k") 'kill-current-buffer)

  ;; M-n for new frame (M-n is unbound in vanilla emacs)
  (defun new-frame ()
    (interactive)
    (select-frame (make-frame))
    (switch-to-buffer "*scratch*"))
  (global-set-key (kbd "M-n") 'new-frame)

  ;; Fill column at 120
  (setq fill-column 120)

#+end_src
** Windows and Tabs
#+BEGIN_SRC emacs-lisp

  ;; Switching between windows. Use `ace-window`, configure using :init and :bind
  (use-package ace-window
    :ensure t
    :init
    (setq aw-scope 'frame)
    :bind ("M-o" . ace-window))
  ;; Open the config file
  (global-set-key (kbd "C-x ,") (lambda() (interactive) (find-file (locate-user-emacs-file "config.org"))))

  (use-package intuitive-tab-line
    :straight (:type git :host github :repo "thread314/intuitive-tab-line-mode")
    ;; :load-path "git/intuitive-tab-line-mode"
    :custom
    (tab-line-tabs-function 'intuitive-tab-line-buffers-list)
    (tab-line-switch-cycling t)
    :config
    (global-tab-line-mode 1)
    (recentf-mode 1)
    (setq
     tab-line-new-button-show nil  ;; do not show add-new button
     tab-line-close-button-show nil  ;; do not show close button
     tab-line-separator " "  ;; delimitation between tabs
     )
    :bind
    ("C-<prior>" . tab-line-switch-to-prev-tab)
    ("C-<iso-lefttab>" . tab-line-switch-to-prev-tab)
    ("C-<next>" . tab-line-switch-to-next-tab)
    ("C-<tab>" . tab-line-switch-to-next-tab)
    ("C-S-<prior>" . intuitive-tab-line-shift-tab-left)
    ("C-S-<next>" . intuitive-tab-line-shift-tab-right)
    ("C-S-t" . recentf-open-most-recent-file))
#+END_SRC
** Backups
#+begin_src emacs-lisp
;; Backup
(setq backup-directory-alist '(("." . "~/.backups"))
      make-backup-files t     ; backup of a file the first time it is saved.
      backup-by-copying t     ; don't clobber symlinks
      version-control t       ; version numbers for backup files
      delete-old-versions t   ; delete excess backup files silently
      kept-old-versions 6     ; oldest versions to keep when a new numbered
                              ;  backup is made (default: 2)
      kept-new-versions 9     ; newest versions to keep when a new numbered
                              ;  backup is made (default: 2)
      auto-save-default t     ; auto-save every buffer that visits a file
      auto-save-timeout 20    ; number of seconds idle time before auto-save
                              ;  (default: 30)
      auto-save-interval 200)  ; number of keystrokes between auto-saves
                              ;  (default: 300)
#+end_src
** Evil
#+BEGIN_SRC emacs-lisp
  (use-package undo-fu)

  (use-package evil
    :init
    (setq evil-respect-visual-line-mode t)
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (setq evil-undo-system 'undo-fu)

    :config
    (evil-mode 1)

    ;; Prevents esc-key from translating to meta-key in terminal mode.
    (setq evil-esc-delay 0)

    (setq-default evil-shift-width 2)
    (setq-default evil-symbol-word-search t)
    (customize-set-variable 'evil-want-Y-yank-to-eol t)

    (evil-add-command-properties #'org-open-at-point :jump t)

    (evil-declare-key 'normal org-mode-map
      "gk" 'outline-up-heading
      "gj" 'outline-next-visible-heading
      "H" 'org-beginning-of-line
      "L" 'org-end-of-line
      "t" 'org-todo
      (kbd "<tab>") 'org-cycle
      ",c" 'org-cycle
      ",e" 'org-export-dispatch
      ",n" 'outline-next-visible-heading
      ",p" 'outline-previous-visible-heading
      ",t" 'org-set-tags-command
      ",u" 'outline-up-heading
      "$" 'org-end-of-line
      "^" 'org-beginning-of-line
      "-" 'org-ctrl-c-minus ; change bullet style
      ))

  (use-package evil-collection
    :straight (:type git :host github :repo "emacs-evil/evil-collection" :fork t)
    :diminish (evil-collection-unimpaired-mode)
    :after evil mu4e
    :ensure t
    :config
    (evil-collection-init))

  (use-package evil-org
    :ensure t
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

#+END_SRC
** Term Mode Stuff
#+begin_src emacs-lisp
  (defun bb/setup-term-mode ()
    (evil-local-set-key 'insert (kbd "C-r") 'bb/send-C-r))

  (defun bb/send-C-r ()
    (interactive)
    (term-send-raw-string "\C-r"))

  (add-hook 'term-mode-hook 'bb/setup-term-mode)

  (when my-linux-p
    (use-package vterm))

  (when my-windows-p
    (use-package powershell))
#+end_src
** Modeline
#+begin_src emacs-lisp
  (use-package all-the-icons)
  (use-package nerd-icons)
  (use-package doom-modeline
    :ensure t
    :init
    (doom-modeline-mode 1))
#+end_src
** Org GTD
#+BEGIN_SRC emacs-lisp
  (use-package org
    :straight (:type built-in)
    :ensure org-plus-contrib
    :hook ((org-capture-mode . delete-other-windows)
           (org-capture-mode . evil-insert-state))
    :custom
    (org-ellipsis " ▼")

    (org-agenda-start-with-log-mode t)
    (org-agenda-window-setup 'only-window)
    (org-startup-folded 'content)
    (org-startup-indented t)
    (org-startup-with-inline-images t)
    (org-clock-persist 'history)
    (org-log-into-drawer t)
    (org-log-done 'time)
    (org-tag-persistent-alist '((:startgroup . nil)
                                ("@computer") ("@mail") ("@errands")
                                (:endgroup . nil) (:startgroup . nil)
                                ("@home") ("@office") ("@anywhere")
                                (:endgroup . nil)
                                ("@fun") ("@agenda")
                                ))

    :config
    ;; So that we can jump back
    (advice-add 'org-open-at-point :before #'evil-set-jump)

    ;; Clock stuff
    (when my-linux-p
      (org-clock-persistence-insinuate)
      (defun current-clock-time-to-file ()
        (interactive)
        (with-temp-file "~/.local/state/task"
          (if (org-clocking-p)
              (insert (org-clock-get-clock-string))
            (insert "No Task"))))
      (run-with-timer 1 60 'current-clock-time-to-file)
      (add-hook 'org-clock-in-hook 'current-clock-time-to-file)
      (add-hook 'org-clock-out-hook 'current-clock-time-to-file))

    ;; Custom functions
    (defun org-capture-inbox ()
      (interactive)
      (call-interactively 'org-store-link)
      (org-capture nil "i"))
    (defun org-capture-mail ()
      (interactive)
      (call-interactively 'org-store-link)
      (org-capture nil "@"))
    :bind
    ("C-c i" . org-capture-inbox)
    ("C-c a" . org-agenda)
    ("C-c l" . org-store-link)
    )
  (defun my/org-gtd-maybe-set-tags ()
    "Use as a hook when decorating items after clarifying them."
    (unless (org-gtd-organize-type-member-p '(trash knowledge quick-action incubated project-heading))
      (org-set-tags-command)))
  (defun my/org-gtd-maybe-set-effort ()
    "Use as a hook when decorating items after clarifying them."
    (unless (org-gtd-organize-type-member-p '(trash knowledge quick-action incubated project-heading))
      (org-set-effort)))
  (use-package org-gtd
    :straight (:type git :host github :repo "Trevoke/org-gtd.el")
    :after org
    ;; :ensure t
    :demand t
    :init
    (setq org-gtd-update-ack "3.0.0")
    (setq org-gtd-areas-of-focus '("Work Leadership" "Work Architecture" "Work Support"
                                   "Productivity" "Personal Development" "Family" "Health" "Finances"))
    :custom
    (org-gtd-directory "~/ndxrd-uxxs3/org/")
    (org-edna-use-inheritance t)
    (org-gtd-organize-hooks '(org-gtd-areas-of-focus--set my/org-gtd-maybe-set-tags my/org-gtd-maybe-set-effort))
    (org-gtd-refile-to-any-target nil)
    (org-gtd-engage-prefix-width 24)
    :config
    (org-edna-mode 1)
    (org-gtd-mode 1)
    :bind
    (("C-c d c" . org-gtd-capture)
     ("C-c c"   . org-gtd-capture)
     ("C-c d e" . org-gtd-engage)
     ("C-c d p" . org-gtd-process-inbox)
     ("C-c d n" . org-gtd-show-all-next)
     ("C-c d x" . org-gtd-clarify-item)
     ("C-c d w" . org-gtd-delegate-item-at-point)
     ("C-c d a" . org-gtd-area-of-focus-set-on-item-at-point)
     ("C-c d s" . org-save-all-org-buffers)
     :map org-gtd-clarify-map
     ("C-c c" . org-gtd-organize)
     :map org-agenda-mode-map
     ("C-c d a" . org-gtd-area-of-focus-set-on-agenda-item)
     ("C-c d x" . org-gtd-clarify-agenda-item)
     ))

#+END_SRC
** Notes
#+begin_src emacs-lisp
  (use-package denote
    :custom
    (denote-directory (expand-file-name "~/ndxrd-uxxs3/notes/"))
    (denote-known-keywords '("emacs" "philosophy" "politics" "economics"))
    (denote-infer-keywords t)
    (denote-sort-keywords t)
    (denote-date-prompt-use-org-read-date t)
    (denote-backlinks-show-context t)
    :config
    (defun my-denote-journal ()
      "Create an entry tagged 'journal' with the date as its title.
       If a journal for the current day exists, visit it.  If multiple
       entries exist, prompt with completion for a choice between them.
       Else create a new file."
      (interactive)
      (let* ((today (format-time-string "%A %e %B %Y"))
             (string (denote-sluggify today))
             (files (denote-directory-files-matching-regexp string)))
        (cond
         ((> (length files) 1)
          (find-file (completing-read "Select file: " files nil :require-match)))
         (files
          (find-file (car files)))
         (t
          (denote
           today
           '("journal"))))))
    :bind
    ("C-c n j" . my-denote-journal)
    )

#+end_src
** COMMENT Org mode manual setup
#+BEGIN_SRC emacs-lisp
  (use-package org
    :straight (:type built-in)
    :ensure org-plus-contrib
    :hook ((org-capture-mode . delete-other-windows)
           (org-capture-mode . evil-insert-state))
    :custom
    (org-directory "~/ndxrd-uxxs3/org")
    (org-agenda-files (list "inbox.org" "work-projects.org" "tickler.org" "MobileInbox.org"))
    (org-capture-templates '(("i" "Inbox" entry (file "inbox.org")
                              "* TODO %i%?\n/Entered on/ %U")
                             ("@" "Inbox [mu4e]" entry (file "inbox.org")
                              "* TODO <Process> \"%a\" %?\n/Entered on/ %U")
                             ("T" "Tickler" entry
                              (file+headline "~/ndxrd-uxxs3/org/tickler.org" "Tickler")
                              "* %i%? \n %U")
                             ("p" "Protocol" entry
                              (file+headline "~/ndxrd-uxxs3/org/notes.org" "Inbox")
                              "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
                             ("L" "Protocol Link" entry
                              (file+headline "~/ndxrd-uxxs3/org/read-later.org" "Read Later")
                              "* %:description%?\n%:link\nCaptured: %U\n"
                              :immediate-finish t
                              :empty-lines 1)
                             ))
    (org-refile-targets '(("~/ndxrd-uxxs3/org/gtd.org" :maxlevel . 3)
                          ("~/ndxrd-uxxs3/org/someday.org" :level . 1)
                          ("~/ndxrd-uxxs3/org/tickler.org" :maxlevel . 2)))
    (org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
    (org-ellipsis " ▼")
    (org-agenda-start-with-log-mode t)
    (org-agenda-window-setup 'only-window)
    (org-log-into-drawer t)
    (org-log-done 'time)
    (org-startup-indented t)
    (org-image-actual-width nil) ;;((list 500))
    (org-startup-with-inline-images t)
    (org-clock-persist 'history)

    :config
    (require 'org-protocol)
    (defun org-capture-inbox ()
      (interactive)
      (call-interactively 'org-store-link)
      (org-capture nil "i"))
    (defun org-capture-mail ()
      (interactive)
      (call-interactively 'org-store-link)
      (org-capture nil "@"))

    (defun my/delete-capture-frame (&rest _)
      "Delete frame with its name frame-parameter set to \"capture\"."
      (if (equal "desktop-capture" (frame-parameter nil 'name))
          (delete-frame)))
    (advice-add 'org-capture-finalize :after #'my/delete-capture-frame)

    (advice-add 'org-open-at-point :before #'evil-set-jump)

    (when my-linux-p
      (org-clock-persistence-insinuate)
      (defun current-clock-time-to-file ()
        (interactive)
        (with-temp-file "~/.local/state/task"
          (if (org-clocking-p)
              (insert (org-clock-get-clock-string))
            (insert "No Task"))))
      (run-with-timer 1 60 'current-clock-time-to-file)
      (add-hook 'org-clock-in-hook 'current-clock-time-to-file)
      (add-hook 'org-clock-out-hook 'current-clock-time-to-file))

    :bind
    ("C-c i" . org-capture-inbox)
    ("C-c a" . org-agenda)
    ("C-c c" . org-capture)
    ("C-c l" . org-store-link)
    )

#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package dash)
  (setq org-archive-default-command #'org-archive-subtree-hierarchically)

  (defun org-archive-subtree-hierarchically (&optional prefix)
    (interactive "P")
    (let* ((fix-archive-p (and (not prefix)
                               (not (use-region-p))))
           (afile  (car (org-archive--compute-location
                         (or (org-entry-get nil "ARCHIVE" 'inherit) org-archive-location))))
           (buffer (or (find-buffer-visiting afile) (find-file-noselect afile))))
      (org-archive-subtree prefix)
      (when fix-archive-p
        (with-current-buffer buffer
          (goto-char (point-max))
          (while (org-up-heading-safe))
          (let* ((olpath (org-entry-get (point) "ARCHIVE_OLPATH"))
                 (path (and olpath (split-string olpath "/")))
                 (level 1)
                 tree-text)
            (when olpath
              (org-mark-subtree)
              (setq tree-text (buffer-substring (region-beginning) (region-end)))
              (let (this-command (inhibit-message t)) (org-cut-subtree)) ; we don’t want to see "Cut subtree" messages
              (goto-char (point-min))
              (save-restriction
                (widen)
                (-each path
                  (lambda (heading)
                    (if (re-search-forward
                         (rx-to-string
                          `(: bol (repeat ,level "*") (1+ " ") ,heading)) nil t)
                        (org-narrow-to-subtree)
                      (goto-char (point-max))
                      (unless (looking-at "^")
                        (insert "\n"))
                      (insert (make-string level ?*)
                              " "
                              heading
                              "\n"))
                    (cl-incf level)))
                (widen)
                (org-end-of-subtree t t)
                (org-paste-subtree level tree-text))))))))

#+END_SRC
** Ediff
#+BEGIN_SRC emacs-lisp
(use-package ediff
  :config
  (setq ediff-split-window-function 'split-window-horizontally)
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  (defun my/command-line-diff (switch)
    (setq initial-buffer-choice nil)
    (let ((file1 (pop command-line-args-left))
      (file2 (pop command-line-args-left)))
      (ediff file1 file2)))
  ;; show the ediff command buffer in the same frame
  (add-to-list 'command-switch-alist '("-diff" . my/command-line-diff)))
#+END_SRC
** File tree
#+begin_src emacs-lisp
  (use-package treemacs
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (defun my-treemacs-toggle ()
      "Initialize or toggle treemacs.
  Ensures that only the current project is present and all other projects have
  been removed.
  Use `treemacs' command for old functionality."
      (interactive)
      (pcase (treemacs-current-visibility)
        (`visible (delete-window (treemacs-get-local-window)))
        (_ (treemacs-add-and-display-current-project))))
    :custom
    (treemacs-follow-after-init t)
    (treemacs-is-never-other-window t)
    (treemacs-follow-mode -1)
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . my-treemacs-toggle)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag))
    )
  (use-package treemacs-evil
    :after (treemacs evil)
    :ensure t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)
  #+end_src
** Presentations
#+begin_src emacs-lisp
  (use-package org-tree-slide)

  (use-package visual-fill-column
    :custom
    (visual-fill-column-width 90)
    (visual-fill-column-center-text t))

  (defun my/org-present-start ()
    ;; Center the presentation and wrap lines
    (visual-fill-column-mode 1)
    (visual-line-mode 1)
    (setq-local face-remapping-alist
                '((default (:height 1.5) variable-pitch)
                  (header-line (:height 4.0) variable-pitch)
                  (org-document-title (:height 1.75) org-document-title)
                  (org-code (:height 1.55) org-code)
                  (org-verbatim (:height 1.55) org-verbatim)
                  (org-block (:height 1.25) org-block)
                  (org-block-begin-line (:height 0.7) org-block)))
    (setq header-line-format " ")
    )
  (defun my/org-present-end ()
    ;; Stop centering the document
    (visual-fill-column-mode 0)
    (visual-line-mode 0)
    ;; (setq-local face-remapping-alist '((default variable-pitch default)))
    (setq-local face-remapping-alist 'nil)
    (setq header-line-format nil)
    )

  (use-package org-present
    :hook
    (org-present-mode . my/org-present-start)
    (org-present-mode-quit . my/org-present-end)
    )
#+end_src
** COMMENT Workspaces - tabspaces
#+BEGIN_SRC emacs-lisp
  (use-package tabspaces
    :straight (:type git :host github :repo "mclear-tools/tabspaces")
    :hook (after-init . tabspaces-mode)
    commands (tabspaces-switch-or-create-workspace
              tabspaces-open-or-create-project-and-workspace)
    :custom
    (tabspaces-use-filtered-buffers-as-default t)
    (tabspaces-default-tab "Default")
    (tabspaces-remove-to-default t)
    (tabspaces-include-buffers '("*scratch*"))
    ;; sessions
    (tabspaces-session t)
    (tabspaces-session-auto-restore t)
    )
#+END_SRC
** COMMENT Workspaces - perspective
#+begin_src emacs-lisp
  (use-package perspective
    :demand t
    :bind (("C-M-k" . persp-switch)
           ("C-M-n" . persp-next)
           ("C-x k" . persp-kill-buffer*))
    :custom
    (persp-initial-frame-name "Main")
    (persp-mode-prefix-key (kbd "C-c p"))
    :config
    ;; Running `persp-mode' multiple times resets the perspective list...
    (unless (equal persp-mode t)
      (persp-mode)))
  #+end_src
** Learning & Discovering
#+begin_src emacs-lisp
  (use-package command-log-mode
    :config
    (global-command-log-mode))

  (use-package which-key
    :config (which-key-mode 1))

  (defun my-reload-emacs-configuration ()
    (interactive)
    (load-file "~/.config/s-emacs/init.el"))
#+end_src
** Create awesome command combos and menus with hydra
#+begin_src emacs-lisp
  (use-package hydra
    :straight t)

  (use-package use-package-hydra
    :straight t)

  (defhydra hydra-straight-helper (:hint nil :color pink)
            "
  _c_: check all       _f_: fetch all     _m_: merge all       _n_: normalize all      _u_: push all
  _C_: check package   _F_: fetch package _M_: merge package   _N_: normalize package  _U_: push package
  _r_: rebuild all     _p_: pull all      _w_: watcher start   _g_: get recipe         _v_: versions freeze
  _R_: rebuild package _P_: pull package  _W_: watcher quit    _e_: prune build        _q_: quit
  "
            ("c" straight-check-all)
            ("C" straight-check-package)
            ("r" straight-rebuild-all)
            ("R" straight-rebuild-package)
            ("f" straight-fetch-all)
            ("F" straight-fetch-package)
            ("p" straight-pull-all)
            ("P" straight-pull-package)
            ("m" straight-merge-all)
            ("M" straight-merge-package)
            ("n" straight-normalize-all)
            ("N" straight-normalize-package)
            ("u" straight-push-all)
            ("U" straight-push-package)
            ("w" straight-watcher-start)
            ("W" straight-watcher-quit)
            ("g" straight-get-recipe)
            ("e" straight-prune-build)
            ("v" straight-freeze-versions)
            ("q" nil :color blue))

#+end_src
** COMMENT Completions based on selectrum
#+BEGIN_SRC emacs-lisp

  (use-package selectrum
    :config
    (selectrum-mode +1))
  (use-package selectrum-prescient
    :config
    ;; to make sorting and filtering more intelligent
    (selectrum-prescient-mode +1)

    ;; to save your command history on disk, so the sorting gets more
    ;; intelligent over time
    (prescient-persist-mode +1))

  (use-package marginalia
    :config
    (marginalia-mode))

  (use-package embark
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

  ;; Focus issues with emacs on xwayland on sway
  ;; (use-package mini-frame
  ;;   :custom
  ;;   (mini-frame-show-parameters '((top . 30) (width . 0.7) (left . 0.5)))
  ;;   :config
  ;;   (mini-frame-mode))

#+END_SRC
** Completions - vertico & friends
#+begin_src emacs-lisp
  (use-package savehist
    :config
    (setq history-length 25)
    (savehist-mode 1))

  (defun dw/minibuffer-backward-kill (arg)
    "When minibuffer is completing a file name delete up to parent
        folder, otherwise delete a word"
    (interactive "p")
    (if minibuffer-completing-file-name
        ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
        (if (string-match-p "/." (minibuffer-contents))
            (zap-up-to-char (- arg) ?/)
          (delete-minibuffer-contents))
      (backward-kill-word arg)))

  (use-package vertico
    :straight '(vertico :host github
                        :repo "minad/vertico"
                        :branch "main")
    :bind (:map vertico-map
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous)
                ("C-f" . vertico-exit)
                :map minibuffer-local-map
                ("M-h" . dw/minibuffer-backward-kill))
    :custom
    (vertico-cycle t)
    ;; :custom-face
    ;; (vertico-current ((t (:background "#3a3f5a"))))
    :init
    (vertico-mode))

  (use-package corfu
    :straight '(corfu :host github
                      :repo "minad/corfu")
    :bind (:map corfu-map
                ("C-j" . corfu-next)
                ("C-k" . corfu-previous)
                ("C-f" . corfu-insert))
    :custom
    (corfu-cycle t)
    :config
    (corfu-global-mode))

  (use-package orderless
    :custom
    ;; (completion-styles '(orderless))
    ;; (completion-category-defaults nil)
    ;; (completion-category-overrides '((file (styles . (partial-completion)))))
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion))))
    )

  (defun dw/get-project-root ()
    (when (fboundp 'projectile-project-root)
      (projectile-project-root)))

  (use-package consult
    :straight t
    :demand t
    :bind (("C-s" . consult-line)
           ("C-M-l" . consult-imenu)
           ("C-M-j" . persp-switch-to-buffer*)
           :map minibuffer-local-map
           ("C-r" . consult-history))
    :custom
    (consult-project-root-function #'dw/get-project-root)
    (completion-in-region-function #'consult-completion-in-region)
    ;; :config
    ;; (consult-preview-mode)
    )

  (use-package marginalia
    :after vertico
    :straight t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))

  (use-package embark
    :straight t
    :bind (("C-S-a" . embark-act)
           :map minibuffer-local-map
           ("C-d" . embark-act))
    :config

    ;; Show Embark actions via which-key
    (setq embark-action-indicator
          (lambda (map)
            (which-key--show-keymap "Embark" map nil nil 'no-paging)
            #'which-key--hide-popup-ignore-command)
          embark-become-indicator embark-action-indicator))

#+end_src
** Project Root
From: https://andreyorst.gitlab.io/posts/2022-07-16-project-el-enhancements/
WARN: This makes emacs on Windows extremely slow
#+BEGIN_SRC emacs-lisp
  (when my-linux-p
    (use-package project
      :config
      (defcustom project-root-markers
        '("inbox.org")
        "Files or directories that indicate the root of a project."
        :type '(repeat string)
        :group 'project)
      (defun project-root-p (path)
        "Check if the current PATH has any of the project root markers."
        (catch 'found
          (dolist (marker project-root-markers)
            (when (file-exists-p (concat path marker))
              (throw 'found marker)))))
      ;; (defun project-find-root (path)
      ;;   "Search up the PATH for `project-root-markers'."
      ;;   (when-let ((root (locate-dominating-file path #'project-root-p)))
      ;;     (cons 'transient (expand-file-name root))))
      (defun project-find-root (path)
        "Search up the PATH for `project-root-markers'."
        (let ((path (expand-file-name path)))
          (catch 'found
            (while (not (equal "/" path))
              (if (not (project-root-p path))
                  (setq path (file-name-directory (directory-file-name path)))
                (throw 'found (cons 'transient path)))))))
      (add-to-list 'project-find-functions #'project-find-root)
      ))
#+END_SRC
** COMMENT Dictionary and spelling
#+BEGIN_SRC emacs-lisp
  (when my-linux-p
    (setq dictionary-server "localhost")
    (use-package flyspell
      :hook text-mode))
#+END_SRC
** Slack
#+begin_src emacs-lisp
  (use-package slack
    :commands (slack-start)
    :init
    (setq slack-buffer-emojify t) ;; if you want to enable emoji, default nil
    (setq slack-prefer-current-team t)
    :config
    (slack-register-team
     :name "greyorange"
     :default t
     :token "***REMOVED***"
     :cookie "***REMOVED***"
     :subscribed-channels '(builds-gtp-core builds-gm-ui)
     :full-and-display-names t)
    (setq slack-enable-global-mode-string t)

    (evil-define-key 'normal slack-info-mode-map
      ",u" 'slack-room-update-messages)
    (evil-define-key 'normal slack-mode-map
      ",c" 'slack-buffer-kill
      ",ra" 'slack-message-add-reaction
      ",rr" 'slack-message-remove-reaction
      ",rs" 'slack-message-show-reaction-users
      ",pl" 'slack-room-pins-list
      ",pa" 'slack-message-pins-add
      ",pr" 'slack-message-pins-remove
      ",mm" 'slack-message-write-another-buffer
      ",me" 'slack-message-edit
      ",md" 'slack-message-delete
      ",u" 'slack-room-update-messages
      ",2" 'slack-message-embed-mention
      ",3" 'slack-message-embed-channel
      "\C-n" 'slack-buffer-goto-next-message
      "\C-p" 'slack-buffer-goto-prev-message)
    (evil-define-key 'normal slack-edit-message-mode-map
      ",k" 'slack-message-cancel-edit
      ",s" 'slack-message-send-from-buffer
      ",2" 'slack-message-embed-mention
      ",3" 'slack-message-embed-channel))

  (use-package alert
    :commands (alert)
    :init
    (setq alert-default-style 'notifications))
#+end_src
** AI Assistants
#+begin_src emacs-lisp
  (use-package copilot
    :diminish
    :straight (:host github :repo "zerolfx/copilot.el" :files ("dist" "*.el"))
    :ensure t
    :hook (prog-mode . copilot-mode)
    :bind (
           ;; ("C-TAB" . 'copilot-accept-completion-by-word)
           ;; ("C-<tab>" . 'copilot-accept-completion-by-word)
           :map copilot-completion-map
           ("<tab>" . 'copilot-accept-completion)
           ("TAB" . 'copilot-accept-completion))
    )

  (use-package auth-source-1password
    :config
    (auth-source-1password-enable))

  (use-package chatgpt-shell
    :ensure t
    :custom
    ((chatgpt-shell-openai-key
      (lambda ()
        (auth-source-pick-first-password :host "openai-key" :user "credential")))))
    #+end_src
** COMMENT Wakatime
#+begin_src emacs-lisp
  (use-package wakatime-mode
    :diminish
    :custom
    (wakatime-api-key "b5c55552-1410-40ad-bc00-0c5693b8b522")
    :config
    (global-wakatime-mode)
    )
#+end_src

** Misc for software dev
#+BEGIN_SRC emacs-lisp
#+END_SRC
** Language Modes
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command '("pandoc" "--from=markdown" "--to=html5"))
    )
  (use-package magit)
  (use-package json-mode)
  (when my-windows-p
    (use-package ahk-mode))
#+END_SRC
** Erlang & LSP
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :diminish (yas-minor-mode)
    :config
    (yas-global-mode t)
    )

  ;; Install the official Erlang mode
  (when my-linux-p
    (add-to-list
     'load-path (car (file-expand-wildcards
                      "/usr/lib/erlang/lib/tools-*/emacs"))))
  (when my-windows-p
    (add-to-list
     'load-path (car (file-expand-wildcards
                      "/Program Files/Erlang OTP/lib/tools-*/emacs"))))
  (use-package erlang
    :straight nil
    :hook ((erlang-mode . linum-mode)
           (erlang-mode . column-number-mode))
    :init
    )
  (require 'erlang-start)
  (use-package elixir-mode)

  (use-package eglot
    :hook (erlang-mode . eglot-ensure)
    :config
    (add-hook 'eglot-managed-mode-hook
              (lambda ()
                ;; Show flymake diagnostics first.
                (setq eldoc-documentation-functions
                      (cons #'flymake-eldoc-function
                            (remove #'flymake-eldoc-function eldoc-documentation-functions)))
                ;; Show all eldoc feedback.
                (setq eldoc-documentation-strategy #'eldoc-documentation-compose)))
    )

  
#+END_SRC
** Docker and Kubernetes
#+begin_src emacs-lisp
  (use-package dockerfile-mode)
  (use-package yaml-mode)
  (use-package kubernetes
    :ensure t
    :commands (kubernetes-overview)
    :config
    (setq kubernetes-poll-frequency 3600
          kubernetes-redraw-frequency 3600))
  (use-package kubernetes-evil
    :ensure t
    :after kubernetes)
#+end_src
** Mastodon
#+begin_src emacs-lisp
  (use-package emojify)
  ;; (:hook (after-init . global-emojify-mode))
  (use-package mastodon
    :straight (:package mastodon :host nil :type git :repo "https://codeberg.org/martianh/mastodon.el.git" :branch "develop")
    :ensure t
    :config
    (setq mastodon-instance-url "https://fedi.srijan.dev"
          mastodon-active-user "srijan")
    )
 #+end_src

** mu4e
#+begin_src emacs-lisp
  (use-package mu4e
    :straight nil
    :if my-linux-p
    :hook (evil-collection-setup . (lambda (&rest a)
                                     (evil-define-key 'normal mu4e-headers-mode-map "z%" 'mu4e-headers-mark-thread)
                                     ))
    :config
    (setq
     ;; mu4e-use-maildirs-extension nil
     mu4e-get-mail-command "systemctl --user start mbsync.service" ;; "mbsync fastmail-all"
     mu4e-view-prefer-html t
     ;; mu4e-update-interval 180
     mu4e-headers-auto-update nil
     mu4e-search-include-related nil
     mu4e-compose-signature-auto-include nil
     mu4e-compose-format-flowed t
     )

    (defun my-mu4e-refile-folder-fun (msg)
      "Set the refile folder for MSG."
      (let ((date (mu4e-message-field msg :date)))
        (cond
         (date
          (format "/fastmail/Archive/%s" (format-time-string "%Y" date)))
         (t
          "/fastmail/Archive"))))

    (setq user-full-name "Srijan Choudhary"
          mu4e-sent-folder "/fastmail/Sent Items"
          mu4e-drafts-folder "/fastmail/Drafts"
          mu4e-trash-folder "/fastmail/Trash"
          ;; mu4e-refile-folder "/fastmail/Archive"
          mu4e-refile-folder 'my-mu4e-refile-folder-fun
          mu4e-attachment-dir  "~/Downloads"
          )

    ;; enable inline images
    (setq mu4e-view-show-images t)

    ;; use imagemagick, if available
    (when (fboundp 'imagemagick-register-types)
      (imagemagick-register-types))

    ;; every new email composition gets its own frame!
    ;; (setq mu4e-compose-in-new-frame t)

    ;; don't save message to Sent Messages, IMAP takes care of this
    (setq mu4e-sent-messages-behavior 'sent)

    (add-hook 'mu4e-view-mode-hook #'visual-line-mode)

    ;; <tab> to navigate to links, <RET> to open them in browser
    (add-hook 'mu4e-view-mode-hook
              (lambda()
                ;; try to emulate some of the eww key-bindings
                (local-set-key (kbd "<RET>") 'mu4e~view-browse-url-from-binding)
                (local-set-key (kbd "<tab>") 'shr-next-link)
                (local-set-key (kbd "<backtab>") 'shr-previous-link)))

    ;; spell check
    (add-hook 'mu4e-compose-mode-hook
              (defun my-do-compose-stuff ()
                "My settings for message composition."
                (visual-line-mode)
                ;; (org-mu4e-compose-org-mode)
                (use-hard-newlines -1)
                ;; (flyspell-mode)
                ))

    ;;rename files when moving
    ;;NEEDED FOR MBSYNC
    (setq mu4e-change-filenames-when-moving t)

    ;; bookmarks
    (add-to-list 'mu4e-bookmarks
                 '( :name  "Inbox GO"
                    :query "maildir:\"/fastmail/Inbox GO\""
                    :key   ?g))
    (add-to-list 'mu4e-bookmarks
                 '( :name  "Inbox Personal"
                    :query "maildir:\"/fastmail/Inbox\""
                    :key   ?p))
    (add-to-list 'mu4e-bookmarks
                 '( :name  "Sent Items"
                    :query "maildir:\"/fastmail/Sent Items\""
                    :key   ?s))
    (add-to-list 'mu4e-bookmarks
                 '( :name  "Waiting For Support"
                    :query "\"maildir:/fastmail/@Waiting For Support\""
                    :key   ?f))
    (add-to-list 'mu4e-bookmarks
                 '( :name  "Action Support"
                    :query "\"maildir:/fastmail/@Action Support\""
                    :key   ?a))
    (add-to-list 'mu4e-bookmarks
                 '( :name  "Inbox"
                    :query "\"maildir:/fastmail/Inbox\" or \"maildir:/fastmail/Inbox GO\""
                    :key   ?i))

    ;; set mail user agent
    (setq mail-user-agent 'mu4e-user-agent
          message-mail-user-agent 'mu4e-user-agent)

    ;; Setup mu4e contexts. This is to enable adding multiple email contexts if needed in the future.
    ;; I will initially only enable my fastmail context but adding a new one shouldn't be harder than copying
    ;; the existing context and modifying the settings.
    (setq mu4e-context-policy 'pick-first)
    (setq mu4e-compose-context-policy 'ask)
    (setq mu4e-contexts
          (list
           (make-mu4e-context
            :name "fastmail"
            :enter-func (lambda () (mu4e-message "Entering context fastmail"))
            :leave-func (lambda () (mu4e-message "Leaving context fastmail"))
            :match-func (lambda (msg)
                          (when msg
                            (mu4e-message-contact-field-matches
                             msg '(:from :to :cc :bcc) "srijan@fastmail.com")))
            :vars '((user-mail-address . "srijan@fastmail.com")
                    ;; (mu4e-compose-signature . (concat "Srijan Choudhary\n" "https://www.srijn.net\n"))
                    (mu4e-compose-format-flowed . t)
                    ))
           (make-mu4e-context
            :name "personal"
            :enter-func (lambda () (mu4e-message "Entering context personal"))
            :leave-func (lambda () (mu4e-message "Leaving context personal"))
            :match-func (lambda (msg)
                          (when msg
                            (mu4e-message-contact-field-matches
                             msg '(:from :to :cc :bcc) "srijan4@gmail.com")))
            :vars '((user-mail-address . "srijan4@gmail.com")
                    ;; (mu4e-compose-signature . (concat "Srijan Choudhary\n" "https://www.srijn.net\n"))
                    (mu4e-compose-format-flowed . t)
                    ))
           (make-mu4e-context
            :name "greyorange"
            :enter-func (lambda () (mu4e-message "Entering context greyorange"))
            :leave-func (lambda () (mu4e-message "Leaving context greyorange"))
            :match-func (lambda (msg)
                          (when msg
                            (mu4e-message-contact-field-matches
                             msg '(:from :to :cc :bcc) "srijan.c@greyorange.com")))
            :vars '((user-mail-address . "srijan.c@greyorange.com")
                    ;; (mu4e-compose-signature . (concat "Srijan Choudhary\n" "https://www.srijn.net\n"))
                    (mu4e-compose-format-flowed . t)
                    ))
           ))
    )
  (use-package org
    :if my-linux-p
    :bind (
           :map mu4e-headers-mode-map
           ("C-c i" . org-capture-mail)
           ;; ("z m" . mu4e-view-mark-thread)
           :map mu4e-view-mode-map
           ("C-c i" . org-capture-mail))
    )

  (use-package org-msg
    :if my-linux-p
    :config
    (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t"
          org-msg-startup "hidestars indent inlineimages"
          org-msg-default-alternatives '((new             . (text html))
                                         (reply-to-html   . (text html))
                                         (reply-to-text   . (text)))
          org-msg-convert-citation t
          org-msg-signature "

  ,#+begin_signature
  --
  ,*Srijan Choudhary*
  ,#+end_signature")
    (org-msg-mode)
    )

  (use-package smtpmail
    :if my-linux-p
    :config

    (setq sendmail-program "/usr/bin/msmtp"
          send-mail-function 'smtpmail-send-it
          message-sendmail-f-is-evil t
          ;; This allows msmtp to automatically choose the correct account
          ;; based on from header.
          message-sendmail-extra-arguments '("--read-envelope-from")
          message-send-mail-function 'message-send-mail-with-sendmail
          smtpmail-debug-info t
          smtpmail-debug-verbose t
          )

    (setq smtpmail-queue-mail nil)
    (setq smtpmail-queue-dir "~/Maildir/queue/cur")
    )
#+end_src

** COMMENT Org journal
#+begin_src emacs-lisp
  (use-package org-journal
    :custom
    (org-journal-dir "~/ndxrd-uxxs3/org/journal"))
#+end_src
** COMMENT Trying EXWM
#+begin_src emacs-lisp
  (use-package perspective-exwm)
  (use-package exwm
    :config
    )
  (defun my/start-exwm ()
    (interactive)
    ;; (require 'exwm-config)
    ;; (exwm-config-default)
    (setq display-time-default-load-average nil)
    (display-time-mode t)
    (require 'exwm)
    (perspective-exwm-mode)
    (setq exwm-workspace-number 4)
    (add-hook 'exwm-update-class-hook
              (lambda ()
                (unless (or (string-prefix-p "sun-awt-X11-" exwm-instance-name)
                            (string= "gimp" exwm-instance-name))
                  (exwm-workspace-rename-buffer exwm-class-name))))
    (add-hook 'exwm-update-title-hook
              (lambda ()
                (when (or (not exwm-instance-name)
                          (string-prefix-p "sun-awt-X11-" exwm-instance-name)
                          (string= "gimp" exwm-instance-name))
                  (exwm-workspace-rename-buffer exwm-title))))

    (setq exwm-input-global-keys
          `(
            ;; Bind "s-r" to exit char-mode and fullscreen mode.
            ([?\s-r] . exwm-reset)
            ;; Bind "s-w" to switch workspace interactively.
            ([?\s-w] . exwm-workspace-switch)
            ;; Bind "s-0" to "s-9" to switch to a workspace by its index.
            ,@(mapcar (lambda (i)
                        `(,(kbd (format "s-%d" i)) .
                          (lambda ()
                            (interactive)
                            (exwm-workspace-switch-create ,i))))
                      (number-sequence 0 9))
            ;; Bind "s-&" to launch applications ('M-&' also works if the output
            ;; buffer does not bother you).
            ([?\s-&] . (lambda (command)
                         (interactive (list (read-shell-command "$ ")))
                         (start-process-shell-command command nil command)))
            ;; Bind "s-<f2>" to "slock", a simple X display locker.
            ([s-f2] . (lambda ()
                        (interactive)
                        (start-process "" nil "/usr/bin/i3lock" "-nefc" "000000")))
            ([s-j] . #'windmove-right)
            ([s-k] . #'windmove-left)
            ))
    (define-key exwm-mode-map [?\C-q] #'exwm-input-send-next-key)
    (exwm-enable)
  
    (require 'exwm-systemtray)
    (exwm-systemtray-enable)

    (setq window-divider-default-right-width 1)
    (window-divider-mode)

    ;; Hide the modeline on all X windows
    (add-hook 'exwm-floating-setup-hook
              (lambda ()
                (exwm-layout-hide-mode-line)))
    )

#+end_src
** Ending Stuff
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold (* 2 1000 1000))
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "Emacs ready in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))

  (let ((inhibit-message t))
    (message "Welcome to GNU Emacs / N Λ N O edition")
    (message (format "Initialization time: %s" (emacs-init-time))))
#+END_SRC


#  LocalWords:  NANO
