#+TITLE: srijan's emacs configuration
#+STARTUP: content

* Configuration :emacs:
** Starting up

Here's how we start:
#+NAME: startup
#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 50 1000 1000))
  (setq gc-cons-percentage 0.6)
  ;; Setup straight
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (use-package straight
    :custom (straight-use-package-by-default t))

  ;; Move customization variables to a separate file and load it
  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)

#+END_SRC

** Personal Information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Srijan Choudhary"
      user-mail-address "srijan4@gmail.com")
#+END_SRC

** Search

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'counsel)
  (straight-use-package 'smex)

  ;; (use-package selectrum
  ;;   :config
  ;;   (selectrum-mode +1))

#+END_SRC

** Evil

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-respect-visual-line-mode t)
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1)

    ;; Prevents esc-key from translating to meta-key in terminal mode.
    (setq evil-esc-delay 0)

    (setq-default evil-shift-width 2)
    (setq-default evil-symbol-word-search t)
    (customize-set-variable 'evil-want-Y-yank-to-eol t)

    (evil-declare-key 'normal org-mode-map
      "gk" 'outline-up-heading
      "gj" 'outline-next-visible-heading
      "H" 'org-beginning-of-line
      "L" 'org-end-of-line
      "t" 'org-todo
      (kbd "<tab>") 'org-cycle
      ",c" 'org-cycle
      ",e" 'org-export-dispatch
      ",n" 'outline-next-visible-heading
      ",p" 'outline-previous-visible-heading
      ",t" 'org-set-tags-command
      ",u" 'outline-up-heading
      "$" 'org-end-of-line
      "^" 'org-beginning-of-line
      "-" 'org-ctrl-c-minus ; change bullet style
      ))

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))

#+END_SRC

** Git

#+BEGIN_SRC emacs-lisp
  (use-package magit)
#+END_SRC

** Erlang & LSP

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    (yas-global-mode t)
    )

  ;; Install the official Erlang mode
  (use-package erlang
    :hook ((erlang-mode . linum-mode)
           (erlang-mode . column-number-mode))
    )

  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "C-l")

    :config
    (add-hook 'erlang-mode-hook #'lsp)
    (setq lsp-log-io t)
    ;; (setq lsp-headerline-breadcrumb-mode nil)
    (setq lsp-headerline-breadcrumb-enable nil)

    (use-package lsp-ui
      :config
      (setq lsp-ui-sideline-enable t)
      (setq lsp-ui-doc-enable t)
      (setq lsp-ui-doc-position 'bottom)
      )

    (use-package lsp-origami
      :hook ((origami-mode . lsp-origami-mode)
             (erlang-mode . origami-mode))
      )

    )

#+END_SRC

** Nano Emacs Theme

#+BEGIN_SRC emacs-lisp
  (use-package nano-emacs
    :straight (:host github :repo "rougier/nano-emacs")
    :no-require t
    :init
    ;; (require 'nano-base-colors)
    ;; (require 'nano-colors)
    (require 'nano-theme-light)
    (require 'nano-theme-dark)
    (require 'nano-layout)
    (require 'nano-faces)
    (require 'nano-theme)

    (setq nano-font-size 14)

    (require 'nano-defaults)
    (require 'nano-session)
    (require 'nano-modeline)
    (require 'nano-bindings)
    (require 'nano-counsel)
    ;; (require 'nano-splash)
    ;; (require 'nano-help)

    (nano-faces)
    (nano-theme)
    (menu-bar-mode -1)

    (let ((inhibit-message t))
      (message "Welcome to GNU Emacs / N Î› N O edition")
      (message (format "Initialization time: %s" (emacs-init-time))))
    )

#+END_SRC

** Ending Stuff
#+BEGIN_SRC emacs-lisp

  (setq gc-cons-threshold (* 2 1000 1000))
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "Emacs ready in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))

#+END_SRC
